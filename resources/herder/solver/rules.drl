package herder.solver;
    dialect "java"

import org.apache.commons.collections.CollectionUtils;
import org.joda.time.Interval;
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import herder.solver.event.Event;
import herder.solver.event.EventType;
import herder.solver.person.Person;

global HardSoftScoreHolder scoreHolder;

rule "spread events out (penalty per extra event in slot)"
    when
        $leftEvent : Event(
                slot != null, $slot: slot,
                $leftId : id)
        $rightEvent : Event(
                slot == $slot,
                id > $leftId)
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -3);
end

rule "people shouldn't overlap"
    when
        $leftEvent : Event(
                slot != null, $slot: slot,
                people != null, $people: people,
                $leftId : id)
        $rightEvent : Event(
                slot == $slot,
                CollectionUtils.isNotEmpty(CollectionUtils.intersection(people, $people)),
                id > $leftId)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "events with people shouldn't have null slots"
    when
        $event : Event(
                slot == null,
                people != null,
                CollectionUtils.isNotEmpty(people))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -15);
end

rule "events without people have null slots"
    when
        $event : Event(
                slot != null,
                people != null,
                CollectionUtils.isEmpty(people))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "events with preferred slots like those"
    when
        $event : Event(
            CollectionUtils.isNotEmpty(preferredSlots),
            !preferredSlots.contains(slot)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -5);
end

rule "multiple day events are on later days"
    when
        $event : Event(
            eventType == EventType.MULTIPLE_DAYS,
            slot != null,
            chainedEvent != null,
            ((Event)chainedEvent).slot != null,
            ((Interval)slot).getStart().toLocalDate() <= ((Interval)((Event)chainedEvent).slot).getStart().toLocalDate()
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -12);
end

rule "one day events are on same days"
    when
        $event : Event(
            eventType == EventType.ONE_DAY,
            slot != null,
            chainedEvent != null,
            ((Event)chainedEvent).slot != null,
            ((Interval)slot).getStart().toLocalDate() != ((Interval)((Event)chainedEvent).slot).getStart().toLocalDate()
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -8);
end

rule "one day events are in sequence"
    when
        $event : Event(
            eventType == EventType.ONE_DAY,
            slot != null,
            chainedEvent != null,
            ((Event)chainedEvent).slot != null,
            ((Interval)slot).getStart() <= ((Interval)((Event)chainedEvent).slot).getStart()
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -3);
end

rule "one day events are as close as possible in order as doable"
    when
        $event : Event(
            eventType == EventType.ONE_DAY,
            slot != null,
            chainedEvent != null,
            ((Event)chainedEvent).slot != null,
            ((Interval)slot).getStart() >= ((Interval)((Event)chainedEvent).slot).getStart()
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext,
        (int)-new Interval (
            ((Interval)((Event)$event.getChainedEvent()).getSlot()).getStart(),
            ((Interval)$event.getSlot()).getStart()
        ).toDurationMillis() / 5000000);
end

rule "people not there on a day, do not have events on that day"
    when
        $event : Event(
            slot != null,
            CollectionUtils.isNotEmpty(notAvailableDays),
            notAvailableDays.contains(((Interval)slot).getStart().toLocalDate()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -5);
end

rule "preferred days matter"
    when
        $event : Event(
            preferredDay != null,
            slot != null,
            slot.getStart().toLocalDate() != preferredDay
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -20);
end
